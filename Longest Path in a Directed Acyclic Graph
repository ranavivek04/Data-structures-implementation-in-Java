import java.util.*;

class AdjListNode {
	private int v;
	private int w;
	
	AdjListNode(int v, int w){
		this.v = v;
		this.w = w;		
	}
	
	int getV(){return v;}
	int getW(){return w;}
}

class Graph{
	int V;
	LinkedList<AdjListNode>[] adj;
	
	Graph(int v){
		  V = v;
		adj = new LinkedList[V];
		
		for(int i = 0; i < V ; i++){ 
                adj[i] = new LinkedList<>(); 
            }
		
	}	
	void addEdge(int u, int v, int w){
		adj[u].add(new AdjListNode(v, w));
	}
	
	void topologicalSortUtil(int v, boolean visited[], Stack<Integer> stack){
		visited[v] = true;
		
		for(AdjListNode node: adj[v]){
			if(!visited[node.getV()]){
				topologicalSortUtil(node.getV(),visited,stack);
			}
		}
		stack.push(v);
	}
	
	void longestPath(int s){
		boolean[] visited = new boolean[V];
		Stack<Integer> stack = new Stack<>();
		int[] dist = new int[V];
		
		for(int i=0;i<V;i++){
			dist[i] = Integer.MIN_VALUE;
		}
		dist[s] = 0;
		
		for(int j=0;j<V;j++){
			if(!visited[j])
				topologicalSortUtil(j,visited,stack);
		}
		
		while(!stack.empty()){
			int v = stack.pop();
			
			for(AdjListNode node: adj[v]){
				if(dist[node.getV()] < dist[v] + node.getW())
					dist[node.getV()] = dist[v] + node.getW();
			}
		}
		
		for(int i=0;i<V;i++){
			if(dist[i] != Integer.MIN_VALUE){
				System.out.print(dist[i]+" ");
			}
		}
		
	}

// Driver program to test above functions 
public static void main(String[] args) 
{ 
	// Create a graph given in the above diagram. 
	// Here vertex numbers are 0, 1, 2, 3, 4, 5 with 
	// following mappings: 
	// 0=r, 1=s, 2=t, 3=x, 4=y, 5=z 
	Graph g = new Graph(6); 
	g.addEdge(0, 1, 5); 
	g.addEdge(0, 2, 3); 
	g.addEdge(1, 3, 6); 
	g.addEdge(1, 2, 2); 
	g.addEdge(2, 4, 4); 
	g.addEdge(2, 5, 2); 
	g.addEdge(2, 3, 7); 
	g.addEdge(3, 5, 1); 
	g.addEdge(3, 4, -1); 
	g.addEdge(4, 5, -2); 

	int s = 1; 
	System.out.print("Following are longest distances from source vertex "+ s + " \n"); 
	g.longestPath(s); 

} 
}
