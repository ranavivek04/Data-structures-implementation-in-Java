class Graph{
	int V;
	LinkedList<Integer>[] adjList;
	
	Graph(int v){
		V = v;
		adjList = new LinkedList<Integer>[V]; 
	}
	
	void addEdge(int p, int q){
		adjList[p].add(q);	
	}
	
	private boolean isCyclic(){
		boolean[] visited  = new boolean[V];
		boolean[] recStack = new boolean[V];
		
		for(int i=0;i<V;i++){
			if(isCyclicUtil(i,visited,recStack)){
				return true;
			}
		}
		return false;
	}
	
	private boolean isCyclicUtil(int i, boolean[] visited, boolean[] recStack){
		if(recStack[i]) return true;
		if(visited[i]) return false;
		visited[i] = true;
		recStack[i]= true;
		
		for(Integer n:adjList.get(i)){
			if(isCyclicUtil(n, visited, recStack) return true;
		}
		
		recStack[i]=false;
		
		return false;
	}
}
