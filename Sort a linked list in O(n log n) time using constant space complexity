/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null) return head;
        
        ListNode slow=head;
        ListNode fast=head;
        ListNode prev=null;
        
        while(fast!=null && fast.next!=null){
            prev=slow;
            slow=slow.next;
            fast=fast.next.next;
        }
        prev.next=null;
        
        ListNode l1=sortList(head);
        ListNode l2=sortList(slow);
        
        
        return merge(l1,l2);
    }
    
    public ListNode merge(ListNode l1,ListNode l2){
        
        if(l1==null && l2==null) return l1;
        else if(l1==null) return l2;
        else if(l2==null) return l1;
        
        ListNode temp=new ListNode(1);
        ListNode t=temp;
        
        while(l1!=null && l2!=null){
            if(l1.val<=l2.val){
                t.next=l1;
                l1=l1.next;
               
            }else if(l2.val<l1.val){
                t.next=l2;
                l2=l2.next;
            }
             t=t.next;
        }
        if(l1!=null){
            t.next=l1;
           
        }
        if(l2!=null){
            t.next=l2;
        }
        
        return temp.next;
    }
}
