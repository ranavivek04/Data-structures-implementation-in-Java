// Java program to demonstrate implementation of k stacks in a single 
// array in time and space efficient way 
public class KStack
{
	int[] topOfStack;
	int[] stackData;
	int[] nextIndex;
	int nextAvailable;
	
	KStack(int k, int n){
		topOfStack=new int[k];
		stackData = new int[n];
		nextIndex = new int[n];
		nextAvailable=0;
		
		for(int i=0;i<k;i++){
			topOfStack[i]=-1;
		}
		
		for(int i=0;i<n;i++){
			nextIndex[i]=i+1;
		}
		nextIndex[n-1]=-1;
		}
	
	void push(int n, int k){
		if(k<0 || k>topOfStack.length-1) return;
		if(nextAvailable<0) return;
		
		int nxt=nextAvailable;
		nextAvailable=nextIndex[nxt];
		stackData[nxt]=n;
		
		nextIndex[nxt]=topOfStack[k];
		topOfStack[k]=nxt;
		
		
	}
	
	int pop(int k){
		if(k<0 || k>=topOfStack.length || topOfStack[k]<0) return -1;
		int p = topOfStack[k];
		int data=stackData[p];
		
		topOfStack[k]=nextIndex[p];
		nextIndex[k]=nextAvailable;
		nextAvailable=p;
		
		return data;
	}

	// Driver program 
	public static void main(String[] args) 
	{ 
		// Let us create 3 stacks in an array of size 10 
		int k = 3, n = 10; 
		
		KStack ks = new KStack(k, n); 

		ks.push(15, 2); 
		ks.push(45, 2); 

		// Let us put some items in stack number 1 
		ks.push(17, 1); 
		ks.push(49, 1); 
		ks.push(39, 1); 

		// Let us put some items in stack number 0 
		ks.push(11, 0); 
		ks.push(9, 0); 
		ks.push(7, 0); 

		System.out.println("Popped element from stack 2 is " + ks.pop(2)); 
		System.out.println("Popped element from stack 1 is " + ks.pop(1)); 
		System.out.println("Popped element from stack 0 is " + ks.pop(0)); 
	} 
} 

