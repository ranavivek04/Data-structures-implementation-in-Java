/*package whatever //do not write package name here */

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	    int arr[] = {1, 23, 12, 9, 30, 2, 50}; 
        int n = arr.length;
        int k = 3;
		buildHeap(arr, n);
		for(int i=0;i<3;i++){
		    System.out.print(extractMax(arr,n-i)+" ");
		}
	}
	
	static int extractMax(int[] A,int n){
	    if(n < 1) return -1;
	    int max = A[0];
	    A[0] = A[n-1];
	    heapify(A,n,0);
	    return max;
	}
	 static void heapify(int arr[], int n, int i) 
    { 
        int largest = i; // Initialize largest as root 
        int l = 2 * i + 1; // left = 2*i + 1 
        int r = 2 * i + 2; // right = 2*i + 2 
  
        // If left child is larger than root 
        if (l < n && arr[l] > arr[largest]) 
            largest = l; 
  
        // If right child is larger than largest so far 
        if (r < n && arr[r] > arr[largest]) 
            largest = r; 
  
        // If largest is not root 
        if (largest != i) { 
            int swap = arr[i]; 
            arr[i] = arr[largest]; 
            arr[largest] = swap; 
  
            // Recursively heapify the affected sub-tree 
            heapify(arr, n, largest); 
        } 
    }
    
    static void buildHeap(int arr[], int n) 
    { 
        for (int i = n/2-1; i >= 0; i--) { 
            heapify(arr, n, i); 
        } 
    } 
}
