// Java program for Kruskal's algorithm to find Minimum 
// Spanning Tree of a given connected, undirected and 
// weighted graph 
import java.util.*; 
import java.lang.*; 
import java.io.*; 

class Graph{
	int V,E;
	Edge[] edge;
	
	class Edge implements Comparable<Edge>{
	    int src;
		int dest;
		int w;
		
		public int compareTo(Edge e){
		    return this.w-e.w;
		}
	}
	
	Graph(int v, int e){
		V=v;
		E=e;
		edge = new Edge[E];
		
		for(int i=0;i<E;i++){
			edge[i] = new Edge();
		}
	}
	
	boolean isCyclic(){
		int[] parent = new int[V];
		int[] sz = new int[V];
		
		for(int i=0;i<V;i++){
			parent[i] = i;
			sz[i] = 1;
		}
		
		for(int i=0;i<E;i++){
			int x = find(edge[i].src,parent);
			int y = find(edge[i].dest,parent);
			
			if(x == y) return true;
			
			union(x,y,parent,sz);	
		}
		
		return false;
	}
	
	int find(int x, int[] p){
		while(x != p[x]){
			p[x] = p[p[x]];
			x = p[x];
		}
		return x;
	}
	
	void union(int x, int y, int[] p,int[] sz){
		int px = find(x,p);
		int py = find(y,p);
		
		if(px == py) return;
		if(sz[px] > sz[py]){
			p[py]=px;
			sz[px] += sz[py];
		}else{
			p[px]=py;
			sz[py] += sz[px];
		}
	}
	void printGraph(){
	    for(int i=0;i<E;i++){
			System.out.print(edge[i].src+"-->"+edge[i].dest+" "+edge[i].w+"\n");
		}
	}
	
	void KruskalMST() 
    {	
        int rs = -1;
        Edge[] result = new Edge[V-1];
        
        for(int i=0;i<V-1;i++){
			result[i] = new Edge();
		}
        
        Arrays.sort(edge);
        
        int[] parent = new int[V];
		int[] sz = new int[V];
		
		for(int i=0;i<V;i++){
			parent[i] = i;
			sz[i] = 1;
		}
		
		for(int j=0;j<E;j++){
		    int x = find(edge[j].src,parent);
		    int y = find(edge[j].dest,parent);
		    
		    if(x!=y){
		        union(x,y,parent,sz);
		        rs += 1;
		        result[rs].src = edge[j].src;
		        result[rs].dest = edge[j].dest;
		        result[rs].w = edge[j].w;
		    }
		}
        	for(int i=0;i<V-1;i++){
			System.out.print(result[i].src+"-->"+result[i].dest+" "+result[i].w+"\n");
        
        
    }
    }	

	// Driver Program 
	public static void main (String[] args) 
	{ 

		/* Let us create following weighted graph 
				10 
			0--------1 
			| \	     | 
		   6| 5\     |15 
			|	 \   | 
			2--------3 
				4	 */
		int V = 4; // Number of vertices in graph 
		int E = 5; // Number of edges in graph 
		Graph graph = new Graph(V, E);

		// add edge 0-1 
		graph.edge[0].src = 0; 
		graph.edge[0].dest = 1; 
		graph.edge[0].w = 10; 

		// add edge 0-2 
		graph.edge[1].src = 0; 
		graph.edge[1].dest = 2; 
		graph.edge[1].w = 6; 

		// add edge 0-3 
		graph.edge[2].src = 0; 
		graph.edge[2].dest = 3; 
		graph.edge[2].w = 5; 

		// add edge 1-3 
		graph.edge[3].src = 1; 
		graph.edge[3].dest = 3; 
		graph.edge[3].w = 15; 

		// add edge 2-3 
		graph.edge[4].src = 2; 
		graph.edge[4].dest = 3; 
		graph.edge[4].w = 4;
        
		graph.KruskalMST(); 
	} 
} 

