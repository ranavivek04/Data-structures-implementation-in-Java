class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        List<List<Integer>> courses = new ArrayList<List<Integer>>(numCourses);
        
        for(int i=0;i<numCourses;i++){
            courses.add(new ArrayList<Integer>());
        }
        
        for(int i=0;i<prerequisites.length;i++){
            courses.get(prerequisites[i][1]).add(prerequisites[i][0]);
        }
        
        boolean[] visited = new boolean[numCourses];
        boolean[] stack   = new boolean[numCourses];
        
        for(int i=0;i<numCourses;i++){
            
            if(!visited[i]) {
               if(dfs(i,courses,visited,stack) == true) return false;
            }
        }
        return true;
    }
    
    private boolean dfs(int s,List<List<Integer>> courses,boolean[] visited,boolean[] stack){
        visited[s] = true;
        stack[s]   = true;
        
        for(Integer v:courses.get(s)){
            if(!visited[v] && dfs(v,courses,visited,stack)) return true;
            else if(stack[v]) return true;
        }
        
        stack[s]=false;
        return false;       
    }   
}
